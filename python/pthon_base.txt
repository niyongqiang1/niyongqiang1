十进制转二进制（递归除以二的余数倒过来就是）
例如：14转二进制：1110
14/2=7余0
 7/2=3余1
 3/2=1余1
 1/2=0余1

二进制转十进制：逆向值乘以逆序的次方
例如:1110.转十进制:14
0*2的0次方等于0
1*2的1次方等于2
1*2的2次方等于4
1*2的3次方等于8
二进制1110等于十进制0+2+4+8就是14
---------------------------------------------------
换行\n
\表示转义 \'等于'
\\表示\

>>> print('I\'m ok.')
I'm ok.
>>> print('I\'m learning\nPython.')
I'm learning
Python.
>>> print('\\\n\\')
\
\
--------------------------------------------------
浮点数
1.23x109和12.3x108是完全相等的。浮点数可以用数学写法，如1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等
--------------------------------------------------
布尔值可以用and、or和not运算。（逻辑运算）
and运算是与运算，只有所有都为True，and运算结果才是True：>>> 5 > 3 and 3 > 1	True
or运算是或运算，只要其中有一个为True，or运算结果就是True：>>> 5 > 3 or 1 > 3	True
not运算是非运算，它是一个单目运算符，把True变成False，False变成True：>>> not 1 > 2          True
变量：python是动态变量,      		java是静态变量
a=1;					int a =1;(定义a是整数类型)
a='abc'					a ='abc'(错误，不能把字符串赋值给整数类型a)
print(a)	abc	

a = 'ABC'	执行a = 'ABC'，解释器创建了字符串'ABC'和变量a，并把a指向'ABC'：
b = a		执行b = a，解释器创建了变量b，并把b指向a指向的字符串'ABC'：
a = 'XYZ'	执行a = 'XYZ'，解释器创建了字符串'XYZ'，并把a的指向改为'XYZ'，但b并没有更改：
print(b)	打印出了b=ABC

---------------------------------------------------- 
函数
字符转整数编码 ord('A')等于65	整数编码转字符 chr(66)等于'A'
len()函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数：
>>> len(b'ABC')
3
>>> len(b'\xe4\xb8\xad\xe6\x96\x87')
6
>>> len('中文'.encode('utf-8'))
6
格式化输出
1：format()方法
>>> print("hello {0},股票涨了 {1:.2f}%,你赚了{2} 万" .format('张三',203.124,30))
hello 张三,股票涨了 203.12%,你赚了30 万
2：占位符替换内容
%02d	整数
%.2f	浮点数
%s	字符串
%%	%
>>>print("hello %s,股票涨了 %.2f%%,你赚了%03d 万" %('张三',203.124,30))
hello 张三,股票涨了 203.12%,你赚了30 万
3：f-string
>>> name = '张三'
>>> f1 = 203.124
>>> int_1 = 30
>>> print(f'hello {name},股票涨了 {f1:.2f},你赚了 {int_1} 万')
hello 张三,股票涨了 203.12%,你赚了30 万
----------------------------------------------------------
使用list有序可重复集合
classmates = ['Sarah', 'Jack',4,True,'Adam']

len()函数可以获得list元素的个数:len(classmates)	>>5
访问list中每一个位置的元素:classmates[0]		>>Adam
追加元素到末尾：classmates.append('Adam')
元素插入到指定索引位置:classmates.insert(1, 'Jack')
元素替换成别的元素,直接赋值给对应的索引位置:classmates[0] = 'Sarah'
删除list末尾/指定索引的元素:classmates.pop()	classmates.pop(1)
删除指定key：classmates.remove（Adam）
拼接二个list列表：classmates.extend（classmates_2）

要拿到'php'可以写p[1]或者s[2][1]，因此s可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到。
注意赋值顺序
p = ['asp', 'php']
s = ['python', 'java', p, 'scheme']
列表功能：     关键字函数方法                    说明
增加         list.insert(索引，数据)     指定位置插入
            list.append(数据)          末尾插入 
            list.extend（list2）       列表2插入列表
修改         list[索引] = 数据          修改指定索引数据      
删除         del list[索引]             删除指定索引数据
            list.remove(数据)          删除第一个出现的指定数据
            list.pop                  删除末尾数据
            list.clear ()               清空列表
统计         len(list)                 列表长度
排序         list.sort()                升序排列
             list.sort(reverse=True)   降序排列
             list.reverse()             逆序/反转
-----------------------------------------------------------


tuple元组
请问以下变量哪些是tuple类型：
 a = ()
 b = (1)
 c = [2]
 d = (3,)
 e = (4,5,6)
 答案：a,d,e

 可变的”tuple：
t = ('a', 'b', ['A', 'B'])
t[2][0] = 'X'
t[2][1] = 'Y'
print(t)
>>('a', 'b', ['X', 'Y'])
------------------------------------------------------------
条件判断if elif else

#if else语句
example2:
age = int(input("请输入年龄:"))
if age >= 18:
	print("已成年，可以上网嗨皮！")
else:
	print("未成年，回家写作业吧！")
print("这句代码什么时候输出？")

example2
根据身高体重计算bmi肥胖值：
height = float(input("身高"))

weight = float(input("体重:"))

bmi = weight/(height*height)

if bmi < 18.5:

    print("bmi: %f 低于18.5：过轻" % bmi)

elif bmi >= 18.5 and bmi <=25:

    print("bmi: %f 18.5-25：正常" % bmi)

elif bmi > 25 and bmi <=28:

    print("bmi: %f 25-28：过重" % bmi)

elif bmi > 28 and bmi <=32:

    print("bmi: %f 28-32：肥胖" % bmi)

else:

    print("bmi: %f 高于32：严重肥胖" % bmi)

循环:计算100内奇数、奇数和
案例1：
n=[]
for i in range(1,100):
    if i%2==1:
        n.append(i)
print (n)
print (sum(n))
案例2：奇数和或者偶数和
n = 0
for i in range(1,100): #可换成 [1,2,3,4,5,6,7,8,9,10-100],(1,100,2)可以求偶数/(1,100,1)可以求偶数
    n = n + i
print(n)
案例3:奇数和
n = 0 
i = 100
while i > 0:
    n = n + i
    i = i -1    #i -2 可以计算偶数和
print(n)
break用法
n = 1
while n <= 100:
    if n > 10: # 当n = 11时，条件满足，执行break语句
        break # break语句会结束当前循环
    print(n)
    n = n + 1
print('END')#打印出1~10后，紧接着打印END，程序结束
continue用法1:打印奇数和偶数
n = 0
while n < 10:
    n = n + 1
    if n % 2 == 0: # 如果n是偶数，执行continue语句
        continue # continue语句会直接继续下一轮循环，后续的print()语句不会执行
    print(n)

continue用法2
i = 0
while i < 10:
    if i == 2:
        i += 1    #代表跳过的数字再加上此数字再继续执行
        continue
    print(i)
    i += 1
print('中止')
>>013456789
while用法1:打印0-9
i = 0 
while i < 10:
    print(i)
    i = i+1
print('中止')
>>0123456789

while用法2:计算1+2+3+...+100:
s = 0 
n = 1
while n <= 100:
    s = s + name
    n = n + 1
print(s)

while用法3:计算1*2*3*...*100的积:
s = 1
n = 1
while n <= 100
    s = s * name
    n = n + 1
print(s)

案例1：打印99乘法表，二个while循环，需要定义变量和计数器
row = 1
while row <= 9:
    col = 1
    while col <= row:
        result = col * row
        print("%s * % s = %s  " % (col,row,result),end = '')
        col += 1
    print("")
    row += 1
案例2：打印99乘法表,for循环+while循环
for row in range(1,10): 
    col = 1
    while col <= row:
        result = col * row
        print("%s * % s = %s  " % (col,row,result),end = '')
        col += 1
    print("")
案例2：打印99乘法表
for row in range(1, 10):
    for col in range(1, i+1):
        print('{}x{}={}'.format(j, i, i*j), end='\t')
    print()
-------------------------------------------
dict字典（key，value存储）
dict = {'张三':60,'李四':85,'王五':95}
print(dict['张三'])
>>60    #打印Key，value自动出来
print( dict.get('张三'))
>>60    #打印Key，value自动出来

dict['张三'] = 70
print(dict['张三'])
>>70   #key不可边，value可变，可直接赋值

print('赵六' in dict)   
>>false                 #判断key'是否存在false/None/指定输出
print(dict.get('赵六'))
>>None                  #判断key'是否存在false/None/指定输出
print(dict.get('赵六','没有value'))
>>没有value             #判断key'是否存在false/None/指定输出
dict.pop('王五')
print(dict)
>>{'张三':60,'李四':85}  #删除dict

-----------------------------------------
函数1：函数可以赋值给变量
def func1(a,b):
    c= a + b
    return (c)      #return告诉调用函数结果
    e = 3           #return下面的代码不会执行并呈现灰色
    
result = func1(2,2) #函数结果需要赋值给一个变量再打印
print(result)
函数2：#定义并调用求绝对值的函数，功能类似abs()
def my_abs(x):
    if x > 0:
        return x
    else:
        return -x
print(my_abs(-2))
函数3：
import math
def my_abs(x):
    if not isinstance(x, (int, float)):   #isinstance函数判断，用法:isinstance（对象或变量,(数据类型)）
        raise TypeError('bad operand 111')#raise+异常名称+（异常原因）
    if x >= 0:
        return x
    else:
        return -x
my_abs(3)
函数参数：（二个参数）计算平方，输入一个参数是默认2次方
def power(x, n=2):  #n=2相当于设置了默认参数,是必选参数在前，默认参数在后，否则Python的解释器会报错
    s = 1
    while n > 0:
        n = n - 1
        s = s * x
    return s
print(power(3,3))
默认函数参数:这样，大多数学生注册时不需要提供年龄和城市，只提供必须的两个参数：
def enroll(name, gender, age=6, city='Beijing'):
    print('name:', name)
    print('gender:', gender)
    print('age:', age)
    print('city:', city)
enroll('Sarah', 'F')
name: Sarah
gender: F
age: 6
city: Beijing
默认参数尽量提供给不可变变量防止值错误变化，或者用str，None这个不变对象来实现
由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。
我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。
def add_end(L=[]):
    L.append('END')
    return L
add_end()
['END', 'END']
add_end()
['END', 'END', 'END']
或者用str，None这个不变对象来实现：
def add_end(L=None):
    if L is None:
        L = []
    L.append('END')
    return L
不可变参数案例：不可变参数计算a2 + b2 + c2 + ……。
def calc(numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum
#但是调用的时候，需要先组装出一个list或tuple：
>>> calc([1, 2, 3])
14
>>> calc((1, 3, 5, 7))
84
可变参数*args案例：可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个list或tuple
可变参数计算a2 + b2 + c2 + ……。

def calc(*numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum
>>> calc(1, 2,4,6,)#实际测试记得用变量接受函数再打印
57
>>> calc()
0
#也可把列表参数加个*号变成可变列表传进去
>>> nums = [1, 2, 3]
>>> calc(nums[0], nums[1], nums[2])#繁琐方法
14
>>> nums = [1, 2, 3]                #简单方法
>>> calc(*nums) 
14

               可变参数*args               关键字参数**kw    
传参个数          0-n个                      0-n个含参数名的参数
传参类型          list/tuple                 dict

关键字参数**kw案例：关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict
def person(name, age, **kw):
    print('name:', name, 'age:', age, 'other:', kw)
person('Michael', 30)
>>name: Michael age: 30 other: {}
也可以传入任意个数的关键字参数：
person('Bob', 35, city='Beijing',job='Engineer')
>name: Bob age: 35 other: {'city': 'Beijing',job='Engineer'}

关键字参数案例：用户注册功能：要求person函数里接收到name和age这两个必选参数，除了用户名和年龄是必填项外，其他都是可选项
def person(name, age, **kw):
    print('name:', name, 'age:', age, 'other:', kw)
user = {'city': 'Beijing', 'job': 'Engineer'}
person('Jack', 24, city=extra['city'], job=extra['job'])#简化写法person('Jack', 24, **extra)
>>name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}

命名关键字参数限制关键字参数案例：只能输入city和job
def person(name, age, *, city, job):#跟在*后面
    print(name, age,*, city, job)

